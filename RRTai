import numpy as np
import math
import random
import matplotlib.pyplot as plt

class RRT:
    """Thuật toán Rapidly-exploring Random Tree cho quy hoạch đường đi"""
    def __init__(self, grid_map, start, goal, step_size=5, max_iterations=1000, goal_sample_rate=0.1):
        self.grid_map = grid_map
        self.height, self.width = grid_map.shape
        self.start = start
        self.goal = goal
        self.step_size = step_size
        self.max_iterations = max_iterations
        self.goal_sample_rate = goal_sample_rate
        self.nodes = [start]
        self.parent = {start: None}
        self.path = []
    
    def distance(self, p1, p2):
        """Tính khoảng cách Euclidean giữa hai điểm"""
        return math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)
    
    def nearest_node(self, point):
        """Tìm nút gần nhất trong cây đối với điểm đã cho"""
        min_dist = float('inf')
        nearest = None
        
        for node in self.nodes:
            dist = self.distance(node, point)
            if dist < min_dist:
                min_dist = dist
                nearest = node
        
        return nearest
    
    def new_point(self, p1, p2):
        """Trả về điểm cách p1 một khoảng step_size theo hướng p2"""
        dx = p2[0] - p1[0]
        dy = p2[1] - p1[1]
        dist = self.distance(p1, p2)
        
        if dist < self.step_size:
            return p2
        
        # Chia tỷ lệ thành step_size
        dx = dx * self.step_size / dist
        dy = dy * self.step_size / dist
        
        return (int(p1[0] + dx), int(p1[1] + dy))
    
    def is_collision_free(self, p1, p2):
        """Kiểm tra đoạn thẳng từ p1 đến p2 có tránh được va chạm không"""
        dx = p2[0] - p1[0]
        dy = p2[1] - p1[1]
        steps = max(abs(dx), abs(dy)) + 1
        
        for i in range(steps):
            t = i / steps
            x = int(p1[0] + t * dx)
            y = int(p1[1] + t * dy)
            
            # Kiểm tra ranh giới
            if x < 0 or x >= self.width or y < 0 or y >= self.height:
                return False
            
            # Kiểm tra chướng ngại vật
            if self.grid_map[y, x] == 1:
                return False
        
        return True
    
    def plan(self):
        """Quy hoạch đường đi sử dụng thuật toán RRT"""
        for i in range(self.max_iterations):
            # Với một xác suất nào đó, lấy mẫu đích
            if random.random() < self.goal_sample_rate:
                random_point = self.goal
            else:
                random_point = (random.randint(0, self.width-1), random.randint(0, self.height-1))
            
            nearest = self.nearest_node(random_point)
            new_node = self.new_point(nearest, random_point)
            
            # Kiểm tra new_node có hợp lệ và tránh được va chạm không
            if (0 <= new_node[0] < self.width and 0 <= new_node[1] < self.height and 
                self.grid_map[new_node[1], new_node[0]] == 0 and 
                self.is_collision_free(nearest, new_node)):
                
                self.nodes.append(new_node)
                self.parent[new_node] = nearest
                
                # Kiểm tra xem chúng ta có thể kết nối với đích không
                if self.distance(new_node, self.goal) < self.step_size and self.is_collision_free(new_node, self.goal):
                    self.nodes.append(self.goal)
                    self.parent[self.goal] = new_node
                    break
        
        # Tái tạo đường đi
        if self.goal in self.parent:
            current = self.goal
            while current:
                self.path.append(current)
                current = self.parent[current]
            self.path.reverse()
            return True
        return False

class RayTracing:
    """Thuật toán Ray Tracing để tránh chướng ngại vật tĩnh"""
    def __init__(self, grid_map):
        self.grid_map = grid_map
        self.height, self.width = grid_map.shape
    
    def trace_ray(self, start, angle, max_dist=100):
        """Theo dõi tia từ điểm bắt đầu ở góc đã cho và trả về giao điểm đầu tiên với chướng ngại vật"""
        x, y = start
        dx = math.cos(angle)
        dy = math.sin(angle)
        
        for i in range(max_dist):
            new_x = int(x + i * dx)
            new_y = int(y + i * dy)
            
            # Kiểm tra ranh giới
            if new_x < 0 or new_x >= self.width or new_y < 0 or new_y >= self.height:
                return (new_x, new_y), i
            
            # Kiểm tra nếu va chạm với chướng ngại vật
            if self.grid_map[new_y, new_x] == 1:  # 1 đại diện cho chướng ngại vật
                return (new_x, new_y), i
        
        return (int(x + max_dist * dx), int(y + max_dist * dy)), max_dist
    
    def find_free_direction(self, robot_pos, angles_to_check=36):
        """Tìm hướng đi tự do cho robot bằng ray tracing"""
        best_direction = 0
        max_dist = 0
        
        for i in range(angles_to_check):
            angle = 2 * math.pi * i / angles_to_check
            _, dist = self.trace_ray(robot_pos, angle)
            
            if dist > max_dist:
                max_dist = dist
                best_direction = angle
        
        return best_direction, max_dist

class WaitingRule:
    """Luật chờ đợi cho việc tránh chướng ngại vật động"""
    def __init__(self, robot_size=1.0):
        self.robot_size = robot_size
    
    def should_wait(self, robot_pos, robot_vel, obstacle_pos, obstacle_vel):
        """Xác định xem robot có nên chờ dựa trên dự đoán va chạm hay không"""
        # Tính toán thời gian để đến điểm giao nhau
        dx = obstacle_pos[0] - robot_pos[0]
        dy = obstacle_pos[1] - robot_pos[1]
        distance = math.sqrt(dx*dx + dy*dy)
        
        # Vector hướng
        robot_speed = np.linalg.norm(robot_vel)
        obstacle_speed = np.linalg.norm(obstacle_vel)
        
        if robot_speed == 0 or obstacle_speed == 0:
            return False
        
        robot_dir = [robot_vel[0]/robot_speed, robot_vel[1]/robot_speed]
        obs_dir = [obstacle_vel[0]/obstacle_speed, obstacle_vel[1]/obstacle_speed]
        
        # Góc giữa các hướng
        dot_product = robot_dir[0]*obs_dir[0] + robot_dir[1]*obs_dir[1]
        angle = math.acos(max(min(dot_product, 1.0), -1.0))
        
        # Nếu di chuyển song song, không có va chạm
        if abs(angle) < 0.1 or abs(angle - math.pi) < 0.1:
            return False
        
        # Tính toán điểm va chạm tiềm năng
        t = distance / robot_speed
        robot_future = [robot_pos[0] + robot_vel[0]*t, robot_pos[1] + robot_vel[1]*t]
        obstacle_future = [obstacle_pos[0] + obstacle_vel[0]*t, obstacle_pos[1] + obstacle_vel[1]*t]
        
        # Kiểm tra xem vị trí tương lai có gần không
        future_dist = math.sqrt((robot_future[0]-obstacle_future[0])**2 + 
                                (robot_future[1]-obstacle_future[1])**2)
        
        # Nếu vị trí tương lai quá gần, hãy chờ
        return future_dist < (self.robot_size * 2)
    
    def calculate_wait_time(self, robot_pos, robot_vel, obstacle_pos, obstacle_vel):
        """Tính toán thời gian robot nên chờ"""
        # Tính toán thời gian để chướng ngại vật đi qua
        dx = obstacle_pos[0] - robot_pos[0]
        dy = obstacle_pos[1] - robot_pos[1]
        distance = math.sqrt(dx*dx + dy*dy)
        obstacle_speed = np.linalg.norm(obstacle_vel)
        
        if obstacle_speed == 0:
            return 0
        
        # Tính toán đơn giản cho thời gian chờ
        wait_time = 2.0 * distance / obstacle_speed  # Hệ số 2 để an toàn
        return wait_time

def demo_path_planning():
    """Demo thuật toán quy hoạch đường đi cho robot di động"""
    # Tạo một bản đồ lưới 2D đơn giản (0: trống, 1: chướng ngại vật)
    grid_size = 100
    grid_map = np.zeros((grid_size, grid_size), dtype=int)
    
    # Thêm một số chướng ngại vật tĩnh
    for i in range(10, 30):
        grid_map[i, 20] = 1  # Tường dọc
    for i in range(40, 60):
        grid_map[i, 60] = 1  # Tường dọc khác
    for i in range(20, 40):
        grid_map[70, i] = 1  # Tường ngang
    
    # Thêm một số chướng ngại vật hình học
    # Chướng ngại vật hình tròn
    center_x, center_y, radius = 30, 40, 5
    for i in range(grid_size):
        for j in range(grid_size):
            if (i - center_y)**2 + (j - center_x)**2 < radius**2:
                grid_map[i, j] = 1
    
    # Chướng ngại vật hình chữ thập
    center_x, center_y = 60, 30
    width, height = 10, 10
    for i in range(center_y - height//2, center_y + height//2):
        grid_map[i, center_x] = 1
    for j in range(center_x - width//2, center_x + width//2):
        grid_map[center_y, j] = 1
    
    # Định nghĩa điểm bắt đầu và kết thúc
    start = (10, 10)
    goal = (90, 90)
    
    # Định nghĩa chướng ngại vật động (vị trí, vận tốc)
    dynamic_obstacles = [
        [(30, 70), [1, 0]],  # Di chuyển sang phải
        [(70, 30), [0, 1]]   # Di chuyển xuống
    ]
    
    # Tạo bộ quy hoạch RRT
    rrt = RRT(grid_map, start, goal)
    
    # Quy hoạch đường đi
    if rrt.plan():
        print("Đã tìm thấy đường đi thành công!")
        path = rrt.path
    else:
        print("Không thể tìm thấy đường đi!")
        return
    
    # Tạo ray tracer và luật chờ đợi
    ray_tracer = RayTracing(grid_map)
    waiting_rule = WaitingRule()
    
    # Hiển thị kết quả
    plt.figure(figsize=(10, 10))
    plt.imshow(grid_map, cmap='binary')
    
    # Vẽ đường đi
    path_x = [p[0] for p in path]
    path_y = [p[1] for p in path]
    plt.plot(path_x, path_y, 'b-', linewidth=2)
    plt.plot(start[0], start[1], 'go', markersize=10)
    plt.plot(goal[0], goal[1], 'ro', markersize=10)
    
    # Vẽ chướng ngại vật động
    for pos, vel in dynamic_obstacles:
        plt.plot(pos[0], pos[1], 'yo', markersize=8)
        # Hiển thị vector vận tốc
        plt.arrow(pos[0], pos[1], vel[0]*5, vel[1]*5, head_width=2, head_length=2, fc='y', ec='y')
    
    plt.title('Quy hoạch đường đi cho Robot di động bằng RRT')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.grid(True)
    plt.savefig('path_planning_result.png')
    plt.show()

if __name__ == "__main__":
    # Chạy demo quy hoạch đường đi
    demo_path_planning()
