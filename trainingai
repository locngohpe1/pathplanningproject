import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np

# Định nghĩa các loại chướng ngại vật
# Chướng ngại vật tĩnh: máy bay, ô tô, tàu, xe tải
# Chướng ngại vật động: chim, mèo, hươu, chó, ếch, ngựa
STATIC_OBSTACLES = [0, 1, 8, 9]  # airplane, automobile, ship, truck
DYNAMIC_OBSTACLES = [2, 3, 4, 5, 6, 7]  # bird, cat, deer, dog, frog, horse

def load_cifar10():
    """Tải và tiền xử lý dữ liệu CIFAR-10"""
    transform = transforms.Compose([
        transforms.Resize((224, 224)),  # GoogLeNet yêu cầu kích thước 224x224
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    ])
    
    # Tải dữ liệu huấn luyện
    train_set = torchvision.datasets.CIFAR10(
        root='./data', train=True, download=True, transform=transform)
    train_loader = torch.utils.data.DataLoader(
        train_set, batch_size=32, shuffle=True, num_workers=2)
    
    # Tải dữ liệu kiểm tra
    test_set = torchvision.datasets.CIFAR10(
        root='./data', train=False, download=True, transform=transform)
    test_loader = torch.utils.data.DataLoader(
        test_set, batch_size=32, shuffle=False, num_workers=2)
    
    classes = ('airplane', 'automobile', 'bird', 'cat', 'deer', 
               'dog', 'frog', 'horse', 'ship', 'truck')
    
    return train_loader, test_loader, classes

def load_googlenet():
    """Tải mô hình GoogLeNet đã huấn luyện trước và chỉnh sửa cho phân loại nhị phân"""
    model = torchvision.models.googlenet(pretrained=True)
    
    # Thay đổi lớp cuối cùng để phân loại nhị phân (tĩnh và động)
    model.fc = nn.Linear(model.fc.in_features, 2)
    
    return model

def map_to_obstacle_type(label):
    """Chuyển đổi nhãn CIFAR-10 thành loại chướng ngại vật (0: tĩnh, 1: động)"""
    if label in STATIC_OBSTACLES:
        return 0  # Chướng ngại vật tĩnh
    else:
        return 1  # Chướng ngại vật động

def train_model(model, train_loader, num_epochs=5):
    """Huấn luyện mô hình để phân loại chướng ngại vật thành tĩnh hoặc động"""
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model = model.to(device)
    
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
    
    # Vòng lặp huấn luyện
    for epoch in range(num_epochs):
        running_loss = 0.0
        
        for i, data in enumerate(train_loader, 0):
            inputs, labels = data
            
            # Chuyển đổi nhãn CIFAR-10 thành loại chướng ngại vật
            obstacle_labels = torch.tensor([map_to_obstacle_type(label.item()) for label in labels])
            
            inputs, obstacle_labels = inputs.to(device), obstacle_labels.to(device)
            
            # Đặt gradient về 0
            optimizer.zero_grad()
            
            # Forward + backward + optimize
            outputs = model(inputs)
            loss = criterion(outputs, obstacle_labels)
            loss.backward()
            optimizer.step()
            
            # In thống kê
            running_loss += loss.item()
            if i % 100 == 99:
                print(f'[Epoch {epoch + 1}, Batch {i + 1}] Loss: {running_loss / 100:.3f}')
                running_loss = 0.0
    
    print('Hoàn thành huấn luyện')
    return model

def test_model(model, test_loader, classes):
    """Kiểm tra mô hình và hiển thị kết quả"""
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model.eval()
    
    # Lấy một số ảnh kiểm tra
    dataiter = iter(test_loader)
    images, labels = next(dataiter)
    
    # Chuyển sang device
    images = images.to(device)
    
    # Dự đoán
    with torch.no_grad():
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
    
    # Chuyển dự đoán và ảnh trở lại CPU để vẽ
    predicted = predicted.cpu().numpy()
    images = images.cpu()
    
    # Vẽ một số ảnh với dự đoán của chúng
    fig = plt.figure(figsize=(15, 5))
    for i in range(8):
        ax = fig.add_subplot(2, 4, i + 1)
        img = images[i] / 2 + 0.5  # Un-normalize
        img = img.permute(1, 2, 0)  # Chuyển từ CxHxW sang HxWxC
        
        ax.imshow(img)
        true_class = classes[labels[i]]
        pred_class = "Static" if predicted[i] == 0 else "Dynamic"
        true_type = "Static" if map_to_obstacle_type(labels[i].item()) == 0 else "Dynamic"
        
        ax.set_title(f'Thực tế: {true_class} ({true_type})\nDự đoán: {pred_class}')
        ax.axis('off')
    
    plt.tight_layout()
    plt.savefig('obstacle_classification.png')
    plt.show()
    
    # Tính toán và in độ chính xác
    correct = 0
    total = 0
    true_positives = 0
    true_negatives = 0
    false_positives = 0
    false_negatives = 0
    
    with torch.no_grad():
        for data in test_loader:
            images, labels = data
            obstacle_labels = torch.tensor([map_to_obstacle_type(label.item()) for label in labels])
            
            images = images.to(device)
            
            outputs = model(images)
            _, predicted = torch.max(outputs, 1)
            predicted = predicted.cpu()
            
            total += obstacle_labels.size(0)
            correct += (predicted == obstacle_labels).sum().item()
            
            # Tính toán ma trận nhầm lẫn
            true_positives += ((predicted == 1) & (obstacle_labels == 1)).sum().item()
            true_negatives += ((predicted == 0) & (obstacle_labels == 0)).sum().item()
            false_positives += ((predicted == 1) & (obstacle_labels == 0)).sum().item()
            false_negatives += ((predicted == 0) & (obstacle_labels == 1)).sum().item()
    
    accuracy = 100 * correct / total
    print(f'Độ chính xác trên tập kiểm tra: {accuracy:.2f}%')
    
    print(f'True Positives (chướng ngại vật động nhận đúng): {true_positives}')
    print(f'True Negatives (chướng ngại vật tĩnh nhận đúng): {true_negatives}')
    print(f'False Positives (chướng ngại vật tĩnh nhận thành động): {false_positives}')
    print(f'False Negatives (chướng ngại vật động nhận thành tĩnh): {false_negatives}')
    
    precision = true_positives / (true_positives + false_positives) if (true_positives + false_positives) > 0 else 0
    recall = true_positives / (true_positives + false_negatives) if (true_positives + false_negatives) > 0 else 0
    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0
    
    print(f'Precision: {precision:.2f}')
    print(f'Recall: {recall:.2f}')
    print(f'F1 Score: {f1:.2f}')

def main():
    # Tải tập dữ liệu CIFAR-10
    train_loader, test_loader, classes = load_cifar10()
    print("Đã tải thành công tập dữ liệu CIFAR-10")
    
    # Tạo mô hình GoogLeNet
    model = load_googlenet()
    print("Đã tải mô hình GoogLeNet và chỉnh sửa cho phân loại chướng ngại vật")
    
    # Huấn luyện mô hình
    print("Bắt đầu huấn luyện...")
    trained_model = train_model(model, train_loader, num_epochs=3)
    
    # Kiểm tra mô hình
    print("Kiểm tra mô hình...")
    test_model(trained_model, test_loader, classes)
    
    # Lưu mô hình đã huấn luyện
    torch.save(trained_model.state_dict(), 'obstacle_classifier.pth')
    print("Đã lưu mô hình vào 'obstacle_classifier.pth'")

if __name__ == "__main__":
    main()
